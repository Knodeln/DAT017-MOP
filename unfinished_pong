/*
 * 	startup.c
 *
 */
 
__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
__asm__ volatile(" MOV SP,R0\n");
__asm__ volatile(" BL main\n");					/* call main */
__asm__ volatile(".L1: B .L1\n");				/* never return */

#define STK_CTRL ((volatile unsigned int *) (0xE000E010)) 
#define STK_LOAD ((volatile unsigned int *) (0xE000E014)) 
#define STK_VAL ((volatile unsigned int *) (0xE000E018)) 

/* GLOBAL REGISTER VALUES - don't use ; with defines */
#define GPIO_MODER ((volatile unsigned int *) (0x40020C00))
#define GPIO_OTYPER ((volatile unsigned short *) (0x40020C04))
#define GPIO_PUPDR ((volatile unsigned int *) (0x40020C0C))
#define GPIO_IDR_LOW ((volatile unsigned char *) (0x40020C10))
#define GPIO_IDR_HIGH ((volatile unsigned char *) (0x40020C11))
#define GPIO_ODR_LOW ((volatile unsigned char *) (0x40020C14))
#define GPIO_ODR_HIGH ((volatile unsigned char *) (0x40020C15))


/* Display defines */
#define PORT_BASE 0x40021000
#define portModer ((volatile unsigned int *) (PORT_BASE))
#define portOtyper ((volatile unsigned short *) (PORT_BASE+0x4))
#define portOspeedr ((volatile unsigned int *) (PORT_BASE+0x8))  
#define portPupdr ((volatile unsigned int *) (PORT_BASE+0xC))

#define portIDRLow ((volatile unsigned char *) (PORT_BASE+0x10))
#define portIDRHigh ((volatile unsigned char *) (PORT_BASE+0x10+1))
#define portODRLow ((volatile unsigned char *) (PORT_BASE+0x14))
#define portODRHigh ((volatile unsigned char *) (PORT_BASE+0x14+1))

#define B_E 0x40
#define B_SELECT 4
#define B_RW 2
#define B_RS 1

}

int g_score_left = 48;
int g_score_right = 48;

__attribute__((naked))
void graphic_initialize(void) {
	__asm volatile (".HWORD 0xDFF0\n");
	__asm volatile ("BX LR\n");
}

__attribute__((naked))
void graphic_clear_screen(void) {
	__asm volatile (".HWORD 0xDFF1\n");
	__asm volatile ("BX LR\n");
}

__attribute__((naked))
void graphic_pixel_set(int x, int y) {
	__asm volatile (".HWORD 0xDFF2\n");
	__asm volatile ("BX LR\n");
}

__attribute__((naked))
void graphic_pixel_clear(int x, int y) {
	__asm volatile (".HWORD 0xDFF3\n");
	__asm volatile ("BX LR\n");
}

void app_init( void ) {
	/* MODER: */
	//*(GPIO_MODER) &= 0xFFFFFFFF;
	*(GPIO_MODER) = 0x55005500;
	//1001 1001 0000 0000 1001 1001 1001 1001
	
	/* OTYPER: */
	*(GPIO_OTYPER) = 0;
	
	/* PUPDR: */
	*(GPIO_PUPDR) &= 0xFF00FFFF;
	*(GPIO_PUPDR) |= 0x00AA0000;
	
	/*port E */
	*portModer = 0x55555555;
}


void kbd_1_Activate( unsigned int row) {
	
	if(row == 0) {
		*GPIO_ODR_LOW = 0x00;
	} else if(row == 1) {
		*GPIO_ODR_LOW = 0x10;
	} else if(row == 2) {
		*GPIO_ODR_LOW = 0x20;
	} else if(row == 3) {
		*GPIO_ODR_LOW = 0x40;
	} else if(row == 4) {
		*GPIO_ODR_LOW = 0x80;
	} else {
		*GPIO_ODR_LOW = 0x00;
	}
}
void kbd_2_Activate( unsigned int row) {
	
	if(row == 0) {
		*GPIO_ODR_HIGH = 0x00;
	} else if(row == 1) {
		*GPIO_ODR_HIGH = 0x10;
	} else if(row == 2) {
		*GPIO_ODR_HIGH = 0x20;
	} else if(row == 3) {
		*GPIO_ODR_HIGH = 0x40;
	} else if(row == 4) {
		*GPIO_ODR_HIGH = 0x80;
	} else {
		*GPIO_ODR_HIGH = 0x00;
	}
}

int kbd_1_GetCol (void) {
	unsigned short c;
	c = *(GPIO_IDR_LOW);
	if ( c & 0x8 ) return 4;
	if ( c & 0x4 ) return 3;
	if ( c & 0x2 ) return 2;
	if ( c & 0x1 ) return 1;
	return 0;
}

int kbd_2_GetCol (void) {
	unsigned short c;
	c = *(GPIO_IDR_HIGH);
	if ( c & 0x8 ) return 4;
	if ( c & 0x4 ) return 3;
	if ( c & 0x2 ) return 2;
	if ( c & 0x1 ) return 1;
	return 0;
}

unsigned char keyb_1( void ){
	unsigned char key[]={1, 2, 3, 0xA, 4, 5, 6, 0xB, 7, 8, 9, 0xC, 0xE, 0, 0xF, 0xD};
	int row, col;
	
	for (row=1; row <=4; row++) {
		kbd_1_Activate( row );
		if( (col = kbd_1_GetCol () ) ) {
			kbd_1_Activate( 0 );
			return key [4*(row-1)+(col-1)];
		} 
	}
	kbd_1_Activate( 0 );
	return 0xFF;	
}

unsigned char keyb_2( void ){
	unsigned char key[]={1, 2, 3, 0xA, 4, 5, 6, 0xB, 7, 8, 9, 0xC, 0xE, 0, 0xF, 0xD};
	int row, col;
	
	for (row=1; row <=4; row++) {
		kbd_2_Activate( row );
		if( (col = kbd_2_GetCol () ) ) {
			kbd_2_Activate( 0 );
			return key [4*(row-1)+(col-1)];
		} 
	}
	kbd_1_Activate( 0 );
	return 0xFF;	
}

int abs(int value) {
	if(value < 0) {
		return value*(-1);
	}
	return value;
}





typedef struct {
	char x; 
	char y;
} POINT, *PPOINT;

#define MAX_POINTS
typedef struct {
	int numpoints;
	int sizex;
	int sizey;
	POINT px[ MAX_POINTS ];
} GEOMETRY, *PGEOMETRY;

GEOMETRY ball_geometry = {
	12,
	4,4,
	{
		{0,1}, {0,2}, {1,0}, {1,1}, {1,2}, {1,3}, {2,0}, {2,1}, {2,2}, {2,3}, {3,1}, {3,2},
	}
};

GEOMETRY paddle_geometry_right = {
	30,
	5,9,
	{
		// Vertikal Linje Start
		{0,0}, {0,1}, {0,2}, {0,3}, {0,4}, {0,5}, {0,6}, {0,7}, {0,8},
		// Horisontell Linje  Top
		{1,0}, {2,0}, {3,0}, {4,0},
		// Vertikal Linje End
		{4,0}, {4,1}, {4,2}, {4,3}, {4,4}, {4,5}, {4,6}, {4,7}, {4,8},
		// Horisontell Linje Bottom
		{1,8}, {2,8}, {3,8}, {4,8},
		// Punkterna i mitten
		{2,3}, {2,4}, {2,5}
	}
};

GEOMETRY paddle_geometry_left = {
	30,
	5,9,
	{
		// Vertikal Linje Start
		{0,0}, {0,1}, {0,2}, {0,3}, {0,4}, {0,5}, {0,6}, {0,7}, {0,8},
		// Horisontell Linje  Top
		{1,0}, {2,0}, {3,0}, {4,0},
		// Vertikal Linje End
		{4,0}, {4,1}, {4,2}, {4,3}, {4,4}, {4,5}, {4,6}, {4,7}, {4,8},
		// Horisontell Linje Bottom
		{1,8}, {2,8}, {3,8}, {4,8},
		// Punkterna i mitten
		{2,3}, {2,4}, {2,5}
	}
};
typedef struct tObj {
	PGEOMETRY geo;
	int dirx, diry;
	int posx, posy;
	void (* draw) (struct tObj *);
	void (* clear) (struct tObj *);
	void (* move) (struct tObj *);
	void (* set_speed) (struct tObj *, int, int);
} OBJECT, *POBJECT;



void draw_ballobject(POBJECT o) {
	PGEOMETRY geo_pointer = o -> geo;
	int nump = geo_pointer -> numpoints;
	int org_x = o -> posx;
	int org_y = o -> posy; 
	POINT px;
	
	for(int i = 0; i < (nump); i++) {
		px =  geo_pointer -> px[i];
		graphic_pixel_set(org_x+px.x, org_y+px.y);
	}
}

void clear_ballobject(POBJECT o) {
	PGEOMETRY geo_pointer = o -> geo;
	int nump = geo_pointer -> numpoints;
	int org_x = o -> posx;
	int org_y = o -> posy; 
	POINT px;
	
	for(int i = 0; i < (nump); i++) {
		px =  geo_pointer -> px[i];
		graphic_pixel_clear(org_x+px.x, org_y+px.y);
	}
}
void move_ballobject(POBJECT o, int startpos_x_ball, int startpos_y_ball) {
	clear_ballobject(o);
	
	PGEOMETRY geo_pointer = o -> geo;
	int nump = geo_pointer -> numpoints;
	int org_x = o -> posx;
	int org_y = o -> posy; 
	int dir_x = o -> dirx;
	int dir_y = o -> diry;
	int next_x = org_x;
	int next_y = org_y;
	POINT pixel;
	
	next_x +=dir_x;
	next_y +=dir_y;
	/* Ny positon */
	if(next_x < 1) {
		g_score_right++;
		reset_object(o, startpos_x_ball, startpos_y_ball);
		//o -> dirx = -(o -> dirx);
	}
	if(next_x > 128) {
		g_score_left++;
		reset_object(o, startpos_x_ball, startpos_y_ball);
		//o -> dirx = -(o -> dirx);
	}
	if(next_y < 1) {
		o -> diry *= (-1);
		//o -> diry = -(o -> diry);
	}
	if(next_y > 64) {
		o -> diry *= (-1);
		//o -> diry = -(o -> diry);
	}
	
	o -> posx += dir_x;
	o -> posy += dir_y;
    
	
	draw_ballobject(o);
	
	
}
void set_ballobject_speed(POBJECT o, int speed_x, int speed_y) {
	o -> dirx = speed_x;
	o -> diry = speed_y;
}

static OBJECT paddleobject_2 = {
	&paddle_geometry_right,
	0,0,
	100,32,
	draw_ballobject,
	clear_ballobject,
	move_ballobject,
	set_ballobject_speed
};

static OBJECT paddleobject_1 = {
	&paddle_geometry_left,
	0,0,
	20,32,
	draw_ballobject,
	clear_ballobject,
	move_ballobject,
	set_ballobject_speed
};

static OBJECT ballobject={
	&ball_geometry,
	4,1,
	50,10,
	draw_ballobject,
	clear_ballobject,
	move_ballobject,
	set_ballobject_speed
};





void delay_250ns( void ) {
	*STK_CTRL = 0;
	*STK_LOAD = ((168/4) - 1);
	*STK_VAL = 0;
	*STK_CTRL = 5;
	while((*STK_CTRL & 0x10000) == 0);
	*STK_CTRL = 0; 
}

void delay_mikro( unsigned int us ) {
	
	#define SIMULATOR
	// Compensating for slow simulation by div. with 1000 NOT ANYMORE
	while(us > 0) {
		delay_250ns();
		delay_250ns();
		delay_250ns();
		delay_250ns();
		us--;
	}
}


void delay_milli( unsigned int ms ) { 
	unsigned int ms_to_us = ms+10; // Borde vara *? //HELP
	delay_mikro((ms_to_us));
}

void reset_object(POBJECT obj, int startpos_x, int startpos_y) {
	clear_ballobject(obj);
	obj -> posx = startpos_x;
	obj -> posy = startpos_y;
}

void collision_left(POBJECT ball, POBJECT paddle) {
	
	PGEOMETRY geo_pointer = ball -> geo;
	int dir_x = ball -> dirx;
	
	
	if((ball -> posx) >= paddle -> posx && (ball -> posx) <= paddle -> posx + 5 ) {
		if((ball -> posy + 4) >= paddle -> posy && (ball -> posy) <= paddle -> posy + 8 ) {
			ball -> dirx *= (-1);
			
		}
	}
}
void collision_right(POBJECT ball, POBJECT paddle) {
	
	if((ball -> posx + 4) >= paddle -> posx && (ball -> posx) <= paddle -> posx + 5 ) {
		if((ball -> posy + 4) >= paddle -> posy && (ball -> posy) <= paddle -> posy + 8 ) {
			set_ballobject_speed(ball, -4, 1);
			
		}
	}
}

/* ----- Asciicode----- */

char ascii_read_controller( void ) {
	*portModer = 0x00005555;
	char rv;
	
	ascii_ctrl_bit_set( B_E );
	delay_mikro(2);
	
	rv = *portIDRHigh;  
	ascii_ctrl_bit_clear( B_E );
	*portModer = 0x55555555;
	return rv;
}

char ascii_read_status( void ) {
	
	*portModer = 0x00005555;
	ascii_ctrl_bit_clear( B_RS );
	ascii_ctrl_bit_set( B_RW );
	char rv = ascii_read_controller(); 
	
	*portModer = 0x55555555;
	return rv;
} 

void ascii_gotoxy(int x, int y) {
	unsigned char address;
	
	if(y != 1) {
		address = 0x40 | x -1;;
		
	} else {
		address = x -1;
	}
	ascii_write_cmd(0x80 | address);
	
}

void ascii_write_char( unsigned char c ) {
	while( (ascii_read_status() & 0x80) == 0x80 ) {}
	delay_mikro(1);
	ascii_write_data( c );
	delay_mikro(1);
}

void ascii_ctrl_bit_clear( char x ) {
	char c = *portODRLow;
	c = c & ~x;
	*portODRLow = B_SELECT | c;
}

void ascii_ctrl_bit_set( unsigned char x ) {
	char c = *portODRLow;
	*portODRLow = B_SELECT | x | c;
}

void ascii_write_controller( unsigned char command) {
	ascii_ctrl_bit_set( B_E );
	*portODRHigh = command;
	ascii_ctrl_bit_clear( B_E );
	delay_250ns();
}

void ascii_write_cmd( unsigned char command ) {
	ascii_ctrl_bit_clear( B_RS );
	ascii_ctrl_bit_clear( B_RW );
	
	ascii_write_controller(command);
}

void ascii_write_data( unsigned char data ) {
	ascii_ctrl_bit_clear( B_RW );
	ascii_ctrl_bit_set( B_RS );
	
	
	ascii_write_controller(data);
}

char ascii_read_data( void ) {
	char rv;
	
	*portModer = 0x00005555;
	ascii_ctrl_bit_set( B_RS );
	ascii_ctrl_bit_set( B_RW );
	rv = ascii_read_controller();
	
	*portModer = 0x55555555;
	return rv;
	
}



void ascii_init( void ) {
	// -- Struktur --
	// Vänta tills statusflaggan är 0
	// Fördröj 8 us
	// write_cmd
	// Fördröj med specifik fördröjning
	
	// Function Set:
	while( (ascii_read_status() & 0x80) == 0x80 ) {}
	delay_mikro(8);
	ascii_write_cmd(0x38); 
	delay_mikro(50);
	
	// Display Control:
	while( (ascii_read_status() & 0x80) == 0x80 ) {}
	delay_mikro(8);
	ascii_write_cmd(0x0C);
	delay_milli(2);
	
	// Clear Display:
	while( (ascii_read_status() & 0x80) == 0x80 ) {}
	delay_mikro(8);
	ascii_write_cmd(1);
	delay_milli(2); 
	
	// Entry Mode Set:
	while( (ascii_read_status() & 0x80) == 0x80 ) {}
	delay_mikro(8);
	ascii_write_cmd(6);
	delay_mikro(50);
}



void main(void) {
	app_init();
	char c;
	char d;
	char *s;
	char score_left[] = "Player 1 score: ";
	char score_right[] = "Player 2 score: ";
	score_left[15] = g_score_left;
	score_right[15] = 48;
	ascii_init();
	graphic_initialize();
	graphic_clear_screen();
	POBJECT ball = &ballobject;
	POBJECT paddle_1 = &paddleobject_1;
	POBJECT paddle_2 = &paddleobject_2;
	draw_ballobject(paddle_1);
	draw_ballobject(paddle_2);
	
	s = score_left;
	while( *s  ) {
		ascii_write_char( *s++ );
	}
	
	ascii_gotoxy(1, 2);
	s = score_right;
	while( *s ) {
		ascii_write_char( *s++ );
	}
	
	int startpos_x_ball = ball -> posx;
	int startpos_y_ball = ball -> posy;
	int startpos_x_paddle_1 = paddle_1 -> posx;
	int startpos_y_paddle_1 = paddle_1 -> posy;
	int startpos_x_paddle_2 = paddle_2 -> posx;
	int startpos_y_paddle_2 = paddle_2 -> posy;
	
	
	while(1) {
		collision_left(ball, paddle_1);
		collision_right(ball, paddle_2);
		move_ballobject(ball, startpos_x_ball, startpos_y_ball);
		paddle_1 -> move(paddle_1);
		paddle_2 -> move(paddle_2);
		delay_milli(20);
		
		
		d = keyb_1();
		
		switch(d){
			case 3:   paddle_1->set_speed(paddle_1, 0, -3); break;
			case 9:   paddle_1->set_speed(paddle_1, 0, 3); break;
			case 255: paddle_1->set_speed(paddle_1, 0, 0); break;
			case 6:   reset_object(ball, startpos_x_ball, startpos_y_ball); reset_object(paddle_2, startpos_x_paddle_2, startpos_y_paddle_2); break;
		}
		
		c = keyb_2();
		
		switch(c) {
			case 3:   paddle_2->set_speed(paddle_2, 0, -3); break;
			case 9:   paddle_2->set_speed(paddle_2, 0, 3); break;
			case 255: paddle_2->set_speed(paddle_2, 0, 0); break;
			case 6:   reset_object(ball, startpos_x_ball, startpos_y_ball); reset_object(paddle_2, startpos_x_paddle_2, startpos_y_paddle_2); break;
			
			
		}
		ascii_gotoxy(16, 1);
		ascii_write_char( g_score_left );
		
		ascii_gotoxy(16, 2);
		ascii_write_char( g_score_right );
	}
}
